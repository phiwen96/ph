digraph structs 
{
	bgcolor=red;
	compound=true;
	ratio=fill;
	fill=true;
	graph [dpi = 1000 bgcolor=black fontcolor=white color=white];
	node [dpi = 1000 bgcolor=black fillcolor=black style=filled color=white fontcolor=white];
	edge [dpi = 1000 bgcolor=black color=white fontcolor=white];






	Assert [shape = record, label = "{Assert}"]

	Bool [shape = record, label = "{Bool}"]

	"Bool" -> Convertible_to [shape = record, label = "  imports"]
	"Bool" -> Assert [shape = record, label = "  imports"]

	Const [shape = record, label = "{Const}"]	

	Convertible_to [shape = record, label = "{Convertible to}"]

	Float [shape = record, label = "{Float}"]

	Integer [shape = record, label = "{Integer}"]

	"Integer" -> Convertible_to [shape = record, label = "  imports"]
	"Integer" -> Assert [shape = record, label = "  imports"]
	
	Iterator [shape = record, label = "{Iterator}"]

	"Iterator" -> Const [shape = record, label = "  imports"]
	"Iterator" -> Pointer [shape = record, label = "  exports"]
	"Iterator" -> Size [shape = record, label = "  exports"]
	"Iterator" -> Reference [shape = record, label = "  imports"]

	Number [shape = record, label = "{Number}"]

	"Number" -> Assert [shape = record, label = "  imports"]
	"Number" -> "Signed" [shape = record, label = "  exports"]
	"Number" -> "Unsigned" [shape = record, label = "  exports"]
	"Number" -> "Integer" [shape = record, label = "  exports"]
	"Number" -> "Float" [shape = record, label = "  exports"]

	Pointer [shape = record, label = "{Pointer}"]

	Range [shape = record, label = "{Range |{contains (Range) - Bool}}"]

	"Range" -> Bool [shape = record, label = "  exports"]
	"Range" -> Iterator [shape = record, label = "  exports"]
	"Range" -> Pointer [shape = record, label = "  imports"]
	"Range" -> Size [shape = record, label = "  exports"]

	Reference [shape = record, label = "{Reference}"]

	Signed [shape = record, label = "{Signed}"]

	"Signed" -> Convertible_to [shape = record, label = "  imports"]
	"Signed" -> Assert [shape = record, label = "  imports"]

	Size [shape = record, label = "{Size}"]

	Unsigned [shape = record, label = "{Unsigned}"]

	"Unsigned" -> Convertible_to [shape = record, label = "  imports"]
	"Unsigned" -> Assert [shape = record, label = "  imports"]





















	


	"Float" -> Convertible_to [shape = record, label = "  imports"]
	"Float" -> Assert [shape = record, label = "  imports"]
}


